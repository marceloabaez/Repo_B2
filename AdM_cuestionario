Arquitectura de Microprocesadores
Alumno: Marcelo Aníbal Báez
Cohorte 19

PREGUNTAS ORIENTADORAS.

------------------------------------------------------------------------------------------
1) Describa brevemente los diferentes perfiles de familias de microprocesadores/
microcontroladores de ARM. Explique algunas de sus diferencias características.

La familia de microprocesadores y microcontroladores ARM se divide en 3 grandes grupos
actualmente, todos denominados Cortex (ésto último los distingue de la generación anterior).

Cortex M: Estos procesadores se especializan en sistemas embebidos, se caracterizan por su
bajo costo y consumo. Están pensados para integrar el corazón de microcontroladores de 32
bits

Cortex R: Procesadores orientados a aplicaciones de tiempo real y considerados críticos en 
cuanto a seguridad, donde se requiere un comportamiento determinístico del procesador en
cuanto a dar respuesta a eventos con deadlines estrictos.

Cortex A: Son los procesadores de mayor performance de ARM, diseñados para manejar sistemas
embebidos de alta performance, donde se prioriza la cantidad de información procesada sobre
la capacidad de atender rápidamente a una excepción, por ejemplo en aplicaciones multimedia.

CORTEX M.
-------------------------------------------------------------------------------------------
1) Describa brevemente las diferencias entre las familias de procesadores Cortex 
M0, M3 y M4.

Los procesadores Cortex M0 están diseñados para aplicaciones menos exigentes donde se prime
el bajo consumo y bajo costo. No cuenta con características que propicien el uso de un RTOS
como el SysTick Timer, Stacks Pointers diferenciados o unidad de protección de memoria (MPU)
y ni otras funcionalidades destinadas a realizar operaciones más complejas como unidad de 
punto flotante ni operación de división por Hardware. Por otro lado ésto á su vez implica 
la utilización de un set de instrucciones más sencillo.
Los Cortex M3 y M4 se utilizan para aplicaciones que exijan un mayor rendimiento, siendo a
su vez más costosos y de mayor consumo. Incluyen el temporizador SysTick, MPU, división
por Hardwarde y operaciones matemáticas con saturación. El Cortex M4 se disetingue del M3
por incluír algunas funciones adicionales como instrucciones orientadas al procesamiento de
señales (DSP) y una unidad de punto flotante opcional.

-------------------------------------------------------------------------------------------
2) ¿Por qué se dice que el set de instrucciones Thumb permite mayor densidad de código?
Explique.

El set de instrucciones Thumb incluye operaciones tanto de 16 como de 32 bits. Al ser la
mayoría de las instrucciones simples de 16 bits, esto permite que los programas ocupen una
menor cantidad de memoria con respecto a la que ocuparían si fueran escritos en un set de
instrucciones puramente en 32bits (un 65% según la página de ARM).

------------------------------------------------------------------------------------------
3) ¿Qué entiende por arquitectura load-store? ¿Qué tipo de instrucciones no posee este
tipo de arquitectura?

La arquitectura load-store se refiere a una arquitectura para el set de instrucciones del
procesador. En ésta las instrucciones se dividen entre instrucciones de acceso a la memoria
(copiar información desde memoria a un registro o hacerlo de forma inversa) u operaciónes
realizadas por la ALU entre registros.

------------------------------------------------------------------------------------------
4) ¿Cómo es el mapa de memoria de la familia?

El mapa de memoria de la familia Cortex de procesadores en de tipo unificada. Toda la
memoria (programa, SRAM, externa, de control de periféricos internos y externos, etc) se
encuentra mapeada en distintas porciones predefinidas de un único mapa de 4GB (usando
un direccionamiento de 32 bits).
 
------------------------------------------------------------------------------------------
5) ¿Qué ventajas presenta el uso de los “shadowed pointers” del PSP y el MSP?

El uso de Shadow Pointers permite utililizar dos stacks, el Main Stack y el Process Stack.
Esto es aprovechado especialmente por los RTOS, donde el sistema operativo utiliza MSP
para sus funciones y delega el PSP para las Tasks. Como el cambio entre PSP y MSP solo
puede ser realizado en modo privilegiado, se protege el MSP de ser corrompido por aplicaciones
que no críticas o poco confiables, aumentando por lo tanto la estabilidad del sistema. 

------------------------------------------------------------------------------------------
6) Describa los diferentes modos de privilegio y operación del Cortex M, sus relaciones y
como se conmuta de uno al otro. Describa un ejemplo en el que se pasa del modo
privilegiado a no priviligiado y nuevamente a privilegiado.

El Cortex M puede operar en dos estados: Debug y Thumb (este último utilizado para la ejecución
normal de los programas). Dentro del estado Thumb es posible operar en dos modos: Handler y
Thread. El modo Handler se utiliza para ejecutar los Handlers de las excepciones y el modo
Thread para ejecutar el código normal del programa. Aparte de dichos modos el procesador
puede ejecutar código en modo privilegiado o no privilegiado. El modo privilegiado permite
leer y escribir en registros especiales no accesibles en el modo no privilegiado, así como
en porciones de la memoria que a través de la MPU se hayan designado para un uso privilegiado.
En el modo Handler el procesador ejecuta siempre en modo privilegiado, mientras que el modo
thread puede ejecutarse tanto en modo privilegiado como en no privilegiado.
Para el cambio entre estado privilegiado y no privilegiado se utiliza el bit 1 del registro
especial CONTROL, en el cual un 0 indica modo privilegiado y un 1 modo no privilegiado. Al 
estar trabjando en modo Thread en modo privilegiado, se setea dicho bit a 1 para pasar a modo
no privilegiado. Una vez en modo no privilegiado ya no se cuenta con permiso para modificar
dicho bit, por lo que no se puede volver directamente al modo privilegiado. Por ello se debe
utilizar una excepción (por ejemplo con SVC) para pasar a modo Handler, el cual siempre se
ejecuta en modo privilegiado, para luego volver poner en 0 el bit 0 de CONTROL. Al volver 
a modo Thread se continúa en modo privilegiada la ejecución.

------------------------------------------------------------------------------------------
7) ¿Qué se entiende por modelo de registros ortogonal? Dé un ejemplo.

Por modelo de registros ortogonal se entiende que los distintos registros especiales de control
pueden 

------------------------------------------------------------------------------------------
8) ¿Qué ventajas presenta el uso de intrucciones de ejecución condicional (IT)? Dé un
ejemplo.

El uso de instrucciones de ejecución condicional puede mejorar la performance del programa,
al permitir el uso de ejecución condicional de código sin recurrir a instrucciones de salto.
Por ejemplo, se debe restar el registro R1 al R0 si R0 es mayor, y en caso contrario sumarlos.
Normalmente luego de comparar ambos registros deberíamos introducir una instrucción de salto,
lo cual implica realizar un flush en el pipeline en caso de cumplirse la condición para el
salto, pero alternativamente pueden utilizarse instrucciones de ejecucion condicional de la
siguiente manera, asumiendo datos signados (el resultado se guarda en R2):

CMP R0, R1
ITE GT
SUBGT R2, R0, R1
ADDLE R2, R0, R1

Pueden acadenarse hasta 4 instrucciones condicionales de esta manera. Las instrucciones no
ejecutadas aún consumen un ciclo de reloj, pero no se produce flush en el pipeline con la
demora correspondiente en el fetch de las instrucciones en el mismo.

------------------------------------------------------------------------------------------
9) Describa brevemente las excepciones más prioritarias (reset, NMI, Hardfault).

- El reset es la interrupción de mayor prioridad (prioridad -3) esto significa que una vez
que se produce nada puede interrumpir su ejecución. Este comportamiento es por supuesto
el que se desea al activar el Reset, un reinicio incondicional del sistema.
- El NMI es un tipo de interrupción que no puede ser enmascarada (ignorada por seteo de los
registros PRIMASK y BASEPRI), solamente puede ser precedida por el Reset. Se utiliza para
manejar interrupciones que por su naturaleza no deban ser de ninguna manera interrupmpidas
cuando se realiza su atención.
- HardFault: Los Cortex M presentan interrupciones para manejar distintos tipos de 
falla: Memory Manage Fault, Bus Fault y Usage Fault, las cuales se disparan automáticamente
cuando se produce un fallo del tipo correspondiete a cada una. Dicho fallo debe ser manejado
por la interrupción apropiada para solucionar el problema o al menos detener el programa
indicando algún código apropiado para el tipo de falla. El HardFault es una interrupción que
se dispara cuando alguna de estas falla escala debido a que se produjo alguna falla en el
handler correspondiente, cuando dicho handler no estaba habilitado. También puede dispararse
cuando se produce un evento de debug mientras el subsistema de debug se encuentra desactivado
o cuando una falla se produce al leer del vector table.  

------------------------------------------------------------------------------------------
10) Describa las funciones principales de la pila. ¿Cómo resuelve la arquitectura el llamado
a funciones y su retorno?

Las funciones principales para trabajar con la pila son PUSH y POP. La pila es una estructura
de datos de tipo LIFO. La función PUSH agrega un dato a la pila (en el caso de Full descending
stack decrementa la dirección del stack pointer y guarda el dato en la nueva dirección). La
función PULL retira el último dato guardado en la lista (lee el dato apuntado por el stack
pointer y luego incrementa la dirección).
Al llamar a una función se guardan antes los registros que contengan valores de interés mas el
valor del Link Register en el stack mediante instrucciones PUSH antes de efectuar el salto.
Cuando se retorna de la función se recupera de la pila el valor de retorno de la función
llamada (si lo hubiera), la dirección que se había guardado del Link Register y los valores de 
registros que fueron guardados antes del salto, todo esto mediante la instrucción POP.

-------------------------------------------------------------------------------------------
11) Describa la secuencia de reset del microprocesador.

Al producirse el reset del microprocesador, el mismo busca el valor ubicado en la dirección
0x0 de la memoria y lo guarda en el registro de Stack Pointer (es decir, la dirección 0 de 
memoria contiene la dirección del comienzo del Stack. La segunda dirección de memoria (0x4),
contiene la dirección de la primera instrucción de entrada luego del reset, por lo que la 
misma se copia al registro Program Counter.

--------------------------------------------------------------------------------------------
12) ¿Qué entiende por “core peripherals”? ¿Qué diferencia existe entre estos y el resto de
los periféricos?

Los Core peripherals son periféricos internos del core, utilizados para controlar su
funcionamiento interno, a diferencia de los otros periféricos que controlan elementos
externos al núcleo. Los Core Peripherals son parte del núcleo del microcontrolador
y por lo tanto son provistos junto con este en la IP que ARM vende a los fabricantes de
microcontroladores/microprocesadores. Los Core Peripherals son el NVIC, MPU, System Control
Block y el SysTick en el Cortex M3, y adicionalmente la FPU en el caso del Cortex M4.

---------------------------------------------------------------------------------------------
13) ¿Cómo se implementan las prioridades de las interrupciones? Dé un ejemplo

Las prioridades de las distintas interrupciones se encuentran mapeadas en una serie de registros
denominados Interrupt Priority Registers. Cada byte de cada uno de estos registros contiene la
prioridad de una interrupción distinta. Los números asignados a las interrupciones están en
relación inversa a su orden de prioridad, las interrupciones más prioritarias son las que
poseen el número de prioridad más bajo, por ejemplo las Interrupciones de mayor prioridad son
Reset con una prioridad de -3, Non Maskable Interrupt con una prioridad de -2 y HardFault con
una prioridad de -1. Estas 3 son las únicas con prioridades fijas, todas las demás son
configurables con prioridades desde 0 a 255 (dependiendo de la implementación pueden no
estar disponibles todos los valores).
Pueden fijarse las prioridades de las diferentes interrupciones escribiendo en los mencionados
registros directamente o a través de funciones de CMSIS, corriendo en modo privilegiado.


----------------------------------------------------------------------------------
14) ¿Qué es el CMSIS? ¿Qué función cumple? ¿Quién lo provee? ¿Qué ventajas aporta?

---------------------------------------------------------------------------------------------
15) Cuando ocurre una interrupción, asumiendo que está habilitada ¿Cómo opera el
microprocesador para atender a la subrutina correspondiente? Explique con un ejemplo.

---------------------------------------------------------------------------------------------
16) ¿Cómo cambia la operación de stacking al utilizar la unidad de punto flotante?

---------------------------------------------------------------------------------------------
17) Explique las características avanzadas de atención a interrupciones: tail chaining y late
arrival.

---------------------------------------------------------------------------------------------
18) ¿Qué es el systick? ¿Por qué puede afirmarse que su implementación favorece la
portabilidad de los sistemas operativos embebidos?

El Sistick es un Core Peripheral de tipo timer que produce una interrupción a intervalos regulares.
La ventaja que presenta para la implementación de sistemas operativos es que proporciona una
base de tiempo para la ejecución del Scheduler, común a todos los sistemas operativos. Favorece
la portabilidad porque el desarrollador del sistema operativo no debe hacerse cargo de la
implementación de esta interrupción periódica necearia para el sistema operativo, la cual ya
viene incluida en todos los procesadores que cuenten con SysTick. 

---------------------------------------------------------------------------------------------
19) ¿Qué funciones cumple la unidad de protección de memoria (MPU)?

La unidad de protección de memoria tiene como fin restringir el acceso a regiones de memoria por
parte de aplicaciones que no cuenten con permiso de acceso a las mismas. La MPU permite
establecer dichas regiones y asignarles un nivel de prioridad. En caso de que alguna
aplicación no autorizada intente acceder a las mismas se dispara una interrupción (MemManage)
a la cual se puede asociar un handler que ejecute una acción correctiva o detenga la ejecución
del programa.

----------------------------------------------------------------------------------------------
20) ¿Cuántas regiones pueden configurarse como máximo? ¿Qué ocurre en caso de haber
solapamientos de las regiones? ¿Qué ocurre con las zonas de memoria no cubiertas por las
regiones definidas?

El máximo de regiones configurables por el MPU es 8, más el seteo de background que incluye
a toda región de memoria no englobada por alguna de éstas 8 regiones. En el caso de solapamiento
de regiones, prima la configuración de la región que tenga un número ID más grande. Por ejemplo
la si hay solapamiento entre las regiones 3 y 4, la zona solapada tendrá activados los permisos
de acceso y escritura de memoria correspondientes a la zona 4. Es por ello que la zona de
backgrund posee el ID 0, ya que su configuración debe ser ivalidada en todas las otras zonas
que se definan las otras 8 regiones. Las regiones de memoria no cubiertas por las regiones
definidas sontienen la restricciones de acceso correspondientes a la región de background. En
caso de que ésta última fuera configurada para no cubrir la totalidad de los 4GB de memoria,
como es habitual, el acceso a alguna de dichas zonas no cubiertas produce un fallo de tipo
Abort Prefetch. 

-----------------------------------------------------------------------------------------------
21) ¿Para qué se suele utilizar la excepción PendSV? ¿Cómo se relaciona su uso con el resto
de las excepciones? Dé un ejemplo.

El PendSV se utiliza en los sistemas operativos de tiempo real para el cambio de contexto entre
las distintas tareas ejecutadas por el RTOS. Es una excepción de menor prioridad que otras
excepciones. La razón de esto es que el cambio de contexto entre tareas solo debe realizarse
una vez que todas las interrupciones hayan sido atendidas, y antes de retornar a la ejecución
de las tareas. En este momento PendSV, en caso de ser requerido un cambio de contexto, guarda
los registros (contexto) de la tarea que se estaba ejecutando y carga los de la tarea a
ejecutar, retornando luego al modo thread para la ejecución de la nueva tarea. 

----------------------------------------------------------------------------------------------
22) ¿Para qué se suele utilizar la excepción SVC? Expliquelo dentro de un marco de un
sistema operativo embebido.

La excepción SVC se suele utilizar en el marco de un sistema operativo para que las aplicaciones
puedan acceder a funciones del hardware. Esto puede hacer el sistema más robusto al ser solamente
el SO el que interactúe con el hardware, previniendo que las aplicaciones puedan rpovocar fallos
en él. Ésto también tiene como fin que las aplicaciones sean más portables, ya que éstas no deben
lidiar con las particularidades del hardware, solo debiendo pasar los parametros correspondientes
para que una API actúe.
Otro uso puede ser, aprovechando que es una excepción disparada por software, puede utilizarse
para cambiar de a modo privilegiado desde una ejecución no privilegiada.
En RTOS sin uso del MPU, esta excepción se utiliza una única vez al inicio para comenzar la primer
tarea.


ISA.

----------------------------------------------------------------------------------------------
1) ¿Qué son los sufijos y para qué se los utiliza? Dé un ejemplo.

Los sufijos en las instrucciones de assembly producen que las mismas se ejecuten con
ligeras modificaciones en su comportamiento. Por ejemplo al agregar el sufijo "S" la
operación afecta los bits del registro APSR, y en otros casos indica datos operación
con datos signados, en algunas operaciones el número 8 o 16 indica que la operación 
se realiza sobre números de 8 o 16 bits, y algo similar ocurre con las letras B (byte)
y H (half-word). 

----------------------------------------------------------------------------------------------
2) ¿Para qué se utiliza el sufijo ‘s’? Dé un ejemplo.

El sufijo 'S' al final de una instrucción le indica al procesador que el resultado de la
misma debe afectar a los flags del registro APSR. Esto es útil cuando alguna instrucción
posterior debe tener una ejecución condicionada por el resultado de una operación anterior.
Un ejemplo de esto podría ser la implementación de un bucle, en el cual se decrementa
un contador que al llegar a 0 produce un salto que produce la salida del mismo (o ingnora
la instrucción de salto hacia atrás del bucle). En este caso a la instrucción SUB que
decrementa la variable contador debe agregársele el sufijo 'S', para que al llegar a 0
el flag Z del registro APSR se ponga en 1, utilizando el mismo como referencia de la
instrucción condicional que controla el bucle. 

---------------------------------------------------------------------------------------------
3) ¿Qué utilidad tiene la implementación de instrucciones de aritmética saturada? Dé un
ejemplo con operaciones con datos de 8 bits.

La aritmética saturada se utiliza en generalmente en el procesamiento digital de señales.
Sirve para que, en caso de que los datos resultantes de una operación excedan los límites
del tipo de dato que los representa, dicho dato quede fijado en sus valores máximo o mínimo,
según corresponda, en lugar de desbordar hacia el límite opuesto. Esto no elimina la
distorsión producida, pero sí la reduce en gram medida, sobretodo en caos en que el valor
que desborda no se exceda mucho de los límites del tipo de dato.
Ej: si estamos midiendo con un conversor AD de 8 bits y tensión máxima de conversión de 
2 volts, en los momentos en que la tensión medida supere este valor el dato guardado
(no signado) será de 255, en lugar de desbordar desde el 0.  


---------------------------------------------------------------------------------------------
4) Describa brevemente la interfaz entre assembler y C ¿Cómo se reciben los argumentos
de las funciones? ¿Cómo se devuelve el resultado? ¿Qué registros deben guardarse en la
pila antes de ser modificados?

Una función en assembly recibe los argumentos desde su llamado en C en los primeros registros
y en el orden en el que están listados en el llamado (primer argumento en R0, segundo en
R1, etc). Luego de terminada la rutina, el valor de retorno debe almacenarse en el registro
R0. Los registros que deben almacenarse en la pila antes de ser utilizados son los registros
del R4 en adelante, los 3 primeros ya son tenidos en cuenta por el compilador de C, y quedan
disponibles desde un principio para las operaciones en assembly. Todos estos requerimientos
se encuentran expresados en el ARM Procedure Call Standard. 

--------------------------------------------------------------------------------------------
5) ¿Qué es una instrucción SIMD? ¿En qué se aplican y que ventajas reporta su uso? Dé un
ejemplo.

Las instrucciones SIMD permiten realizar operaciones sobre dos datos o grupos de datos de
manera simultánea, siempre y cuando los mismos tengan un tamaño de 16 u 8 bits. Los dos
datos a operar deben encontrarse juntos en una dirección de memoria de 32bits (dos datos
de 16 bits o 4 de 8 bits). Con esto se aprovecha que, al procesar el CPU datos de 32bits,
pueden en una misma instrucción ejecutarse simultáneamente dos operaciones sobre datos de
16 bits o 4 sobre datos de 8bits. se aplican principalmente en el procesamiento de señales
(DSP), permitiendo generar un ahorro significativo en los tiempos de procesamiento de
grandes cantidades de datos, cuando dichos datos se expresan mediante 8 o 16 bits.
Por ejemplo podríamos estar recibiendo lecturas con una resolución de 16 bits desde un
sensor, estos datos pueden estar almacenándose en algun buffer en la memoria mediante
DMA. Los datos estarán dispuestos en half-words consecutivos y una vez que se llena dicho
buffer el procesador procesa dichos datos de a dos a la vez mediante instrucciones SIMD,
almacenándolos de a pares en algún otro buffer. 
